package main

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *ChecksumAlgo) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int
		zb0001, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ChecksumAlgo(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ChecksumAlgo) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt(int(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ChecksumAlgo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ChecksumAlgo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int
		zb0001, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ChecksumAlgo(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ChecksumAlgo) Msgsize() (s int) {
	s = msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ErasureAlgo) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int
		zb0001, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ErasureAlgo(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ErasureAlgo) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt(int(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ErasureAlgo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ErasureAlgo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int
		zb0001, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ErasureAlgo(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ErasureAlgo) Msgsize() (s int) {
	s = msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Format) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int
		zb0001, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Format(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Format) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt(int(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Format) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Format) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int
		zb0001, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Format(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Format) Msgsize() (s int) {
	s = msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *JournalType) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int
		zb0001, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = JournalType(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z JournalType) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt(int(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z JournalType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *JournalType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int
		zb0001, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = JournalType(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z JournalType) Msgsize() (s int) {
	s = msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ObjectMetaV2) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "v":
			z.Version, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "fmt":
			{
				var zb0002 int
				zb0002, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Format")
					return
				}
				z.Format = Format(zb0002)
			}
		case "journals":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ObjectJournals")
				return
			}
			if cap(z.ObjectJournals) >= int(zb0003) {
				z.ObjectJournals = (z.ObjectJournals)[:zb0003]
			} else {
				z.ObjectJournals = make([]ObjectMetaV2JournalEntry, zb0003)
			}
			for za0001 := range z.ObjectJournals {
				err = z.ObjectJournals[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "ObjectJournals", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ObjectMetaV2) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "v"
	err = en.Append(0x83, 0xa1, 0x76)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Version)
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	// write "fmt"
	err = en.Append(0xa3, 0x66, 0x6d, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(int(z.Format))
	if err != nil {
		err = msgp.WrapError(err, "Format")
		return
	}
	// write "journals"
	err = en.Append(0xa8, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ObjectJournals)))
	if err != nil {
		err = msgp.WrapError(err, "ObjectJournals")
		return
	}
	for za0001 := range z.ObjectJournals {
		err = z.ObjectJournals[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "ObjectJournals", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ObjectMetaV2) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "v"
	o = append(o, 0x83, 0xa1, 0x76)
	o = msgp.AppendInt64(o, z.Version)
	// string "fmt"
	o = append(o, 0xa3, 0x66, 0x6d, 0x74)
	o = msgp.AppendInt(o, int(z.Format))
	// string "journals"
	o = append(o, 0xa8, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ObjectJournals)))
	for za0001 := range z.ObjectJournals {
		o, err = z.ObjectJournals[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "ObjectJournals", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ObjectMetaV2) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "v":
			z.Version, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "fmt":
			{
				var zb0002 int
				zb0002, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Format")
					return
				}
				z.Format = Format(zb0002)
			}
		case "journals":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ObjectJournals")
				return
			}
			if cap(z.ObjectJournals) >= int(zb0003) {
				z.ObjectJournals = (z.ObjectJournals)[:zb0003]
			} else {
				z.ObjectJournals = make([]ObjectMetaV2JournalEntry, zb0003)
			}
			for za0001 := range z.ObjectJournals {
				bts, err = z.ObjectJournals[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ObjectJournals", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ObjectMetaV2) Msgsize() (s int) {
	s = 1 + 2 + msgp.Int64Size + 4 + msgp.IntSize + 9 + msgp.ArrayHeaderSize
	for za0001 := range z.ObjectJournals {
		s += z.ObjectJournals[za0001].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ObjectMetaV2DeleteMarker) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.VersionID, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "VersionID")
				return
			}
		case "mtime":
			z.ModTime, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ModTime")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ObjectMetaV2DeleteMarker) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "id"
	err = en.Append(0x82, 0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.VersionID)
	if err != nil {
		err = msgp.WrapError(err, "VersionID")
		return
	}
	// write "mtime"
	err = en.Append(0xa5, 0x6d, 0x74, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ModTime)
	if err != nil {
		err = msgp.WrapError(err, "ModTime")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ObjectMetaV2DeleteMarker) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "id"
	o = append(o, 0x82, 0xa2, 0x69, 0x64)
	o = msgp.AppendUint64(o, z.VersionID)
	// string "mtime"
	o = append(o, 0xa5, 0x6d, 0x74, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.ModTime)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ObjectMetaV2DeleteMarker) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.VersionID, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "VersionID")
				return
			}
		case "mtime":
			z.ModTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ModTime")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ObjectMetaV2DeleteMarker) Msgsize() (s int) {
	s = 1 + 3 + msgp.Uint64Size + 6 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ObjectMetaV2JournalEntry) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "type":
			{
				var zb0002 int
				zb0002, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Type")
					return
				}
				z.Type = JournalType(zb0002)
			}
		case "delete":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "DeleteMarker")
					return
				}
				z.DeleteMarker = nil
			} else {
				if z.DeleteMarker == nil {
					z.DeleteMarker = new(ObjectMetaV2DeleteMarker)
				}
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "DeleteMarker")
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "DeleteMarker")
						return
					}
					switch msgp.UnsafeString(field) {
					case "id":
						z.DeleteMarker.VersionID, err = dc.ReadUint64()
						if err != nil {
							err = msgp.WrapError(err, "DeleteMarker", "VersionID")
							return
						}
					case "mtime":
						z.DeleteMarker.ModTime, err = dc.ReadInt64()
						if err != nil {
							err = msgp.WrapError(err, "DeleteMarker", "ModTime")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "DeleteMarker")
							return
						}
					}
				}
			}
		case "object":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Object")
					return
				}
				z.Object = nil
			} else {
				if z.Object == nil {
					z.Object = new(ObjectMetaV2Object)
				}
				err = z.Object.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Object")
					return
				}
			}
		case "link":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Link")
					return
				}
				z.Link = nil
			} else {
				if z.Link == nil {
					z.Link = new(ObjectMetaV2Link)
				}
				err = z.Link.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Link")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ObjectMetaV2JournalEntry) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(4)
	var zb0001Mask uint8 /* 4 bits */
	if z.DeleteMarker == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Object == nil {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.Link == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	// write "type"
	err = en.Append(0xa4, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(int(z.Type))
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// write "delete"
		err = en.Append(0xa6, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65)
		if err != nil {
			return
		}
		if z.DeleteMarker == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// map header, size 2
			// write "id"
			err = en.Append(0x82, 0xa2, 0x69, 0x64)
			if err != nil {
				return
			}
			err = en.WriteUint64(z.DeleteMarker.VersionID)
			if err != nil {
				err = msgp.WrapError(err, "DeleteMarker", "VersionID")
				return
			}
			// write "mtime"
			err = en.Append(0xa5, 0x6d, 0x74, 0x69, 0x6d, 0x65)
			if err != nil {
				return
			}
			err = en.WriteInt64(z.DeleteMarker.ModTime)
			if err != nil {
				err = msgp.WrapError(err, "DeleteMarker", "ModTime")
				return
			}
		}
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// write "object"
		err = en.Append(0xa6, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74)
		if err != nil {
			return
		}
		if z.Object == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Object.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Object")
				return
			}
		}
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// write "link"
		err = en.Append(0xa4, 0x6c, 0x69, 0x6e, 0x6b)
		if err != nil {
			return
		}
		if z.Link == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Link.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Link")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ObjectMetaV2JournalEntry) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(4)
	var zb0001Mask uint8 /* 4 bits */
	if z.DeleteMarker == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Object == nil {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.Link == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	// string "type"
	o = append(o, 0xa4, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendInt(o, int(z.Type))
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// string "delete"
		o = append(o, 0xa6, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65)
		if z.DeleteMarker == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "id"
			o = append(o, 0x82, 0xa2, 0x69, 0x64)
			o = msgp.AppendUint64(o, z.DeleteMarker.VersionID)
			// string "mtime"
			o = append(o, 0xa5, 0x6d, 0x74, 0x69, 0x6d, 0x65)
			o = msgp.AppendInt64(o, z.DeleteMarker.ModTime)
		}
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// string "object"
		o = append(o, 0xa6, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74)
		if z.Object == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Object.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Object")
				return
			}
		}
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// string "link"
		o = append(o, 0xa4, 0x6c, 0x69, 0x6e, 0x6b)
		if z.Link == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Link.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Link")
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ObjectMetaV2JournalEntry) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "type":
			{
				var zb0002 int
				zb0002, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Type")
					return
				}
				z.Type = JournalType(zb0002)
			}
		case "delete":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.DeleteMarker = nil
			} else {
				if z.DeleteMarker == nil {
					z.DeleteMarker = new(ObjectMetaV2DeleteMarker)
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "DeleteMarker")
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "DeleteMarker")
						return
					}
					switch msgp.UnsafeString(field) {
					case "id":
						z.DeleteMarker.VersionID, bts, err = msgp.ReadUint64Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "DeleteMarker", "VersionID")
							return
						}
					case "mtime":
						z.DeleteMarker.ModTime, bts, err = msgp.ReadInt64Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "DeleteMarker", "ModTime")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "DeleteMarker")
							return
						}
					}
				}
			}
		case "object":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Object = nil
			} else {
				if z.Object == nil {
					z.Object = new(ObjectMetaV2Object)
				}
				bts, err = z.Object.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Object")
					return
				}
			}
		case "link":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Link = nil
			} else {
				if z.Link == nil {
					z.Link = new(ObjectMetaV2Link)
				}
				bts, err = z.Link.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Link")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ObjectMetaV2JournalEntry) Msgsize() (s int) {
	s = 1 + 5 + msgp.IntSize + 7
	if z.DeleteMarker == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 3 + msgp.Uint64Size + 6 + msgp.Int64Size
	}
	s += 7
	if z.Object == nil {
		s += msgp.NilSize
	} else {
		s += z.Object.Msgsize()
	}
	s += 5
	if z.Link == nil {
		s += msgp.NilSize
	} else {
		s += z.Link.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ObjectMetaV2Link) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.VersionID, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "VersionID")
				return
			}
		case "dd":
			z.DataDir, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "DataDir")
				return
			}
		case "ealgo":
			{
				var zb0002 int
				zb0002, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "DataErasureAlgorithm")
					return
				}
				z.DataErasureAlgorithm = ErasureAlgo(zb0002)
			}
		case "m":
			z.DataErasureM, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "DataErasureM")
				return
			}
		case "n":
			z.DataErasureN, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "DataErasureN")
				return
			}
		case "bsize":
			z.DataErasureBlockSize, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "DataErasureBlockSize")
				return
			}
		case "index":
			z.DataErasureIndex, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "DataErasureIndex")
				return
			}
		case "dist":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "DataErasureDistribution")
				return
			}
			if cap(z.DataErasureDistribution) >= int(zb0003) {
				z.DataErasureDistribution = (z.DataErasureDistribution)[:zb0003]
			} else {
				z.DataErasureDistribution = make([]int, zb0003)
			}
			for za0001 := range z.DataErasureDistribution {
				z.DataErasureDistribution[za0001], err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "DataErasureDistribution", za0001)
					return
				}
			}
		case "clago":
			{
				var zb0004 int
				zb0004, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "DataErasureChecksumAlgo")
					return
				}
				z.DataErasureChecksumAlgo = ChecksumAlgo(zb0004)
			}
		case "pnum":
			err = z.DataPartInfoNumbers.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "DataPartInfoNumbers")
				return
			}
		case "psz":
			err = z.DataPartInfoSizes.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "DataPartInfoSizes")
				return
			}
		case "size":
			z.StatSize, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "StatSize")
				return
			}
		case "mtime":
			z.StatModTime, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "StatModTime")
				return
			}
		case "msys":
			var zb0005 uint32
			zb0005, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "MetaSys")
				return
			}
			if z.MetaSys == nil {
				z.MetaSys = make(map[string]string, zb0005)
			} else if len(z.MetaSys) > 0 {
				for key := range z.MetaSys {
					delete(z.MetaSys, key)
				}
			}
			for zb0005 > 0 {
				zb0005--
				var za0002 string
				var za0003 string
				za0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "MetaSys")
					return
				}
				za0003, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "MetaSys", za0002)
					return
				}
				z.MetaSys[za0002] = za0003
			}
		case "mbin":
			var zb0006 uint32
			zb0006, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "MetaSysBin")
				return
			}
			if z.MetaSysBin == nil {
				z.MetaSysBin = make(map[string][]byte, zb0006)
			} else if len(z.MetaSysBin) > 0 {
				for key := range z.MetaSysBin {
					delete(z.MetaSysBin, key)
				}
			}
			for zb0006 > 0 {
				zb0006--
				var za0004 string
				var za0005 []byte
				za0004, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "MetaSysBin")
					return
				}
				za0005, err = dc.ReadBytes(za0005)
				if err != nil {
					err = msgp.WrapError(err, "MetaSysBin", za0004)
					return
				}
				z.MetaSysBin[za0004] = za0005
			}
		case "muser":
			var zb0007 uint32
			zb0007, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "MetaUser")
				return
			}
			if z.MetaUser == nil {
				z.MetaUser = make(map[string]string, zb0007)
			} else if len(z.MetaUser) > 0 {
				for key := range z.MetaUser {
					delete(z.MetaUser, key)
				}
			}
			for zb0007 > 0 {
				zb0007--
				var za0006 string
				var za0007 string
				za0006, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "MetaUser")
					return
				}
				za0007, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "MetaUser", za0006)
					return
				}
				z.MetaUser[za0006] = za0007
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ObjectMetaV2Link) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(16)
	var zb0001Mask uint16 /* 16 bits */
	if z.MetaSys == nil {
		zb0001Len--
		zb0001Mask |= 0x2000
	}
	if z.MetaSysBin == nil {
		zb0001Len--
		zb0001Mask |= 0x4000
	}
	if z.MetaUser == nil {
		zb0001Len--
		zb0001Mask |= 0x8000
	}
	// variable map header, size zb0001Len
	err = en.WriteMapHeader(zb0001Len)
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	// write "id"
	err = en.Append(0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.VersionID)
	if err != nil {
		err = msgp.WrapError(err, "VersionID")
		return
	}
	// write "dd"
	err = en.Append(0xa2, 0x64, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.DataDir)
	if err != nil {
		err = msgp.WrapError(err, "DataDir")
		return
	}
	// write "ealgo"
	err = en.Append(0xa5, 0x65, 0x61, 0x6c, 0x67, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteInt(int(z.DataErasureAlgorithm))
	if err != nil {
		err = msgp.WrapError(err, "DataErasureAlgorithm")
		return
	}
	// write "m"
	err = en.Append(0xa1, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.DataErasureM)
	if err != nil {
		err = msgp.WrapError(err, "DataErasureM")
		return
	}
	// write "n"
	err = en.Append(0xa1, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt(z.DataErasureN)
	if err != nil {
		err = msgp.WrapError(err, "DataErasureN")
		return
	}
	// write "bsize"
	err = en.Append(0xa5, 0x62, 0x73, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.DataErasureBlockSize)
	if err != nil {
		err = msgp.WrapError(err, "DataErasureBlockSize")
		return
	}
	// write "index"
	err = en.Append(0xa5, 0x69, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteInt(z.DataErasureIndex)
	if err != nil {
		err = msgp.WrapError(err, "DataErasureIndex")
		return
	}
	// write "dist"
	err = en.Append(0xa4, 0x64, 0x69, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.DataErasureDistribution)))
	if err != nil {
		err = msgp.WrapError(err, "DataErasureDistribution")
		return
	}
	for za0001 := range z.DataErasureDistribution {
		err = en.WriteInt(z.DataErasureDistribution[za0001])
		if err != nil {
			err = msgp.WrapError(err, "DataErasureDistribution", za0001)
			return
		}
	}
	// write "clago"
	err = en.Append(0xa5, 0x63, 0x6c, 0x61, 0x67, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteInt(int(z.DataErasureChecksumAlgo))
	if err != nil {
		err = msgp.WrapError(err, "DataErasureChecksumAlgo")
		return
	}
	// write "pnum"
	err = en.Append(0xa4, 0x70, 0x6e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = z.DataPartInfoNumbers.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "DataPartInfoNumbers")
		return
	}
	// write "psz"
	err = en.Append(0xa3, 0x70, 0x73, 0x7a)
	if err != nil {
		return
	}
	err = z.DataPartInfoSizes.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "DataPartInfoSizes")
		return
	}
	// write "size"
	err = en.Append(0xa4, 0x73, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.StatSize)
	if err != nil {
		err = msgp.WrapError(err, "StatSize")
		return
	}
	// write "mtime"
	err = en.Append(0xa5, 0x6d, 0x74, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.StatModTime)
	if err != nil {
		err = msgp.WrapError(err, "StatModTime")
		return
	}
	if (zb0001Mask & 0x2000) == 0 { // if not empty
		// write "msys"
		err = en.Append(0xa4, 0x6d, 0x73, 0x79, 0x73)
		if err != nil {
			return
		}
		err = en.WriteMapHeader(uint32(len(z.MetaSys)))
		if err != nil {
			err = msgp.WrapError(err, "MetaSys")
			return
		}
		for za0002, za0003 := range z.MetaSys {
			err = en.WriteString(za0002)
			if err != nil {
				err = msgp.WrapError(err, "MetaSys")
				return
			}
			err = en.WriteString(za0003)
			if err != nil {
				err = msgp.WrapError(err, "MetaSys", za0002)
				return
			}
		}
	}
	if (zb0001Mask & 0x4000) == 0 { // if not empty
		// write "mbin"
		err = en.Append(0xa4, 0x6d, 0x62, 0x69, 0x6e)
		if err != nil {
			return
		}
		err = en.WriteMapHeader(uint32(len(z.MetaSysBin)))
		if err != nil {
			err = msgp.WrapError(err, "MetaSysBin")
			return
		}
		for za0004, za0005 := range z.MetaSysBin {
			err = en.WriteString(za0004)
			if err != nil {
				err = msgp.WrapError(err, "MetaSysBin")
				return
			}
			err = en.WriteBytes(za0005)
			if err != nil {
				err = msgp.WrapError(err, "MetaSysBin", za0004)
				return
			}
		}
	}
	if (zb0001Mask & 0x8000) == 0 { // if not empty
		// write "muser"
		err = en.Append(0xa5, 0x6d, 0x75, 0x73, 0x65, 0x72)
		if err != nil {
			return
		}
		err = en.WriteMapHeader(uint32(len(z.MetaUser)))
		if err != nil {
			err = msgp.WrapError(err, "MetaUser")
			return
		}
		for za0006, za0007 := range z.MetaUser {
			err = en.WriteString(za0006)
			if err != nil {
				err = msgp.WrapError(err, "MetaUser")
				return
			}
			err = en.WriteString(za0007)
			if err != nil {
				err = msgp.WrapError(err, "MetaUser", za0006)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ObjectMetaV2Link) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(16)
	var zb0001Mask uint16 /* 16 bits */
	if z.MetaSys == nil {
		zb0001Len--
		zb0001Mask |= 0x2000
	}
	if z.MetaSysBin == nil {
		zb0001Len--
		zb0001Mask |= 0x4000
	}
	if z.MetaUser == nil {
		zb0001Len--
		zb0001Mask |= 0x8000
	}
	// variable map header, size zb0001Len
	o = msgp.AppendMapHeader(o, zb0001Len)
	if zb0001Len == 0 {
		return
	}
	// string "id"
	o = append(o, 0xa2, 0x69, 0x64)
	o = msgp.AppendUint64(o, z.VersionID)
	// string "dd"
	o = append(o, 0xa2, 0x64, 0x64)
	o = msgp.AppendUint64(o, z.DataDir)
	// string "ealgo"
	o = append(o, 0xa5, 0x65, 0x61, 0x6c, 0x67, 0x6f)
	o = msgp.AppendInt(o, int(z.DataErasureAlgorithm))
	// string "m"
	o = append(o, 0xa1, 0x6d)
	o = msgp.AppendInt(o, z.DataErasureM)
	// string "n"
	o = append(o, 0xa1, 0x6e)
	o = msgp.AppendInt(o, z.DataErasureN)
	// string "bsize"
	o = append(o, 0xa5, 0x62, 0x73, 0x69, 0x7a, 0x65)
	o = msgp.AppendInt(o, z.DataErasureBlockSize)
	// string "index"
	o = append(o, 0xa5, 0x69, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendInt(o, z.DataErasureIndex)
	// string "dist"
	o = append(o, 0xa4, 0x64, 0x69, 0x73, 0x74)
	o = msgp.AppendArrayHeader(o, uint32(len(z.DataErasureDistribution)))
	for za0001 := range z.DataErasureDistribution {
		o = msgp.AppendInt(o, z.DataErasureDistribution[za0001])
	}
	// string "clago"
	o = append(o, 0xa5, 0x63, 0x6c, 0x61, 0x67, 0x6f)
	o = msgp.AppendInt(o, int(z.DataErasureChecksumAlgo))
	// string "pnum"
	o = append(o, 0xa4, 0x70, 0x6e, 0x75, 0x6d)
	o, err = z.DataPartInfoNumbers.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "DataPartInfoNumbers")
		return
	}
	// string "psz"
	o = append(o, 0xa3, 0x70, 0x73, 0x7a)
	o, err = z.DataPartInfoSizes.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "DataPartInfoSizes")
		return
	}
	// string "size"
	o = append(o, 0xa4, 0x73, 0x69, 0x7a, 0x65)
	o = msgp.AppendInt(o, z.StatSize)
	// string "mtime"
	o = append(o, 0xa5, 0x6d, 0x74, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.StatModTime)
	if (zb0001Mask & 0x2000) == 0 { // if not empty
		// string "msys"
		o = append(o, 0xa4, 0x6d, 0x73, 0x79, 0x73)
		o = msgp.AppendMapHeader(o, uint32(len(z.MetaSys)))
		for za0002, za0003 := range z.MetaSys {
			o = msgp.AppendString(o, za0002)
			o = msgp.AppendString(o, za0003)
		}
	}
	if (zb0001Mask & 0x4000) == 0 { // if not empty
		// string "mbin"
		o = append(o, 0xa4, 0x6d, 0x62, 0x69, 0x6e)
		o = msgp.AppendMapHeader(o, uint32(len(z.MetaSysBin)))
		for za0004, za0005 := range z.MetaSysBin {
			o = msgp.AppendString(o, za0004)
			o = msgp.AppendBytes(o, za0005)
		}
	}
	if (zb0001Mask & 0x8000) == 0 { // if not empty
		// string "muser"
		o = append(o, 0xa5, 0x6d, 0x75, 0x73, 0x65, 0x72)
		o = msgp.AppendMapHeader(o, uint32(len(z.MetaUser)))
		for za0006, za0007 := range z.MetaUser {
			o = msgp.AppendString(o, za0006)
			o = msgp.AppendString(o, za0007)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ObjectMetaV2Link) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.VersionID, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "VersionID")
				return
			}
		case "dd":
			z.DataDir, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DataDir")
				return
			}
		case "ealgo":
			{
				var zb0002 int
				zb0002, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "DataErasureAlgorithm")
					return
				}
				z.DataErasureAlgorithm = ErasureAlgo(zb0002)
			}
		case "m":
			z.DataErasureM, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DataErasureM")
				return
			}
		case "n":
			z.DataErasureN, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DataErasureN")
				return
			}
		case "bsize":
			z.DataErasureBlockSize, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DataErasureBlockSize")
				return
			}
		case "index":
			z.DataErasureIndex, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DataErasureIndex")
				return
			}
		case "dist":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DataErasureDistribution")
				return
			}
			if cap(z.DataErasureDistribution) >= int(zb0003) {
				z.DataErasureDistribution = (z.DataErasureDistribution)[:zb0003]
			} else {
				z.DataErasureDistribution = make([]int, zb0003)
			}
			for za0001 := range z.DataErasureDistribution {
				z.DataErasureDistribution[za0001], bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "DataErasureDistribution", za0001)
					return
				}
			}
		case "clago":
			{
				var zb0004 int
				zb0004, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "DataErasureChecksumAlgo")
					return
				}
				z.DataErasureChecksumAlgo = ChecksumAlgo(zb0004)
			}
		case "pnum":
			bts, err = z.DataPartInfoNumbers.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "DataPartInfoNumbers")
				return
			}
		case "psz":
			bts, err = z.DataPartInfoSizes.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "DataPartInfoSizes")
				return
			}
		case "size":
			z.StatSize, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StatSize")
				return
			}
		case "mtime":
			z.StatModTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StatModTime")
				return
			}
		case "msys":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MetaSys")
				return
			}
			if z.MetaSys == nil {
				z.MetaSys = make(map[string]string, zb0005)
			} else if len(z.MetaSys) > 0 {
				for key := range z.MetaSys {
					delete(z.MetaSys, key)
				}
			}
			for zb0005 > 0 {
				var za0002 string
				var za0003 string
				zb0005--
				za0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "MetaSys")
					return
				}
				za0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "MetaSys", za0002)
					return
				}
				z.MetaSys[za0002] = za0003
			}
		case "mbin":
			var zb0006 uint32
			zb0006, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MetaSysBin")
				return
			}
			if z.MetaSysBin == nil {
				z.MetaSysBin = make(map[string][]byte, zb0006)
			} else if len(z.MetaSysBin) > 0 {
				for key := range z.MetaSysBin {
					delete(z.MetaSysBin, key)
				}
			}
			for zb0006 > 0 {
				var za0004 string
				var za0005 []byte
				zb0006--
				za0004, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "MetaSysBin")
					return
				}
				za0005, bts, err = msgp.ReadBytesBytes(bts, za0005)
				if err != nil {
					err = msgp.WrapError(err, "MetaSysBin", za0004)
					return
				}
				z.MetaSysBin[za0004] = za0005
			}
		case "muser":
			var zb0007 uint32
			zb0007, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MetaUser")
				return
			}
			if z.MetaUser == nil {
				z.MetaUser = make(map[string]string, zb0007)
			} else if len(z.MetaUser) > 0 {
				for key := range z.MetaUser {
					delete(z.MetaUser, key)
				}
			}
			for zb0007 > 0 {
				var za0006 string
				var za0007 string
				zb0007--
				za0006, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "MetaUser")
					return
				}
				za0007, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "MetaUser", za0006)
					return
				}
				z.MetaUser[za0006] = za0007
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ObjectMetaV2Link) Msgsize() (s int) {
	s = 3 + 3 + msgp.Uint64Size + 3 + msgp.Uint64Size + 6 + msgp.IntSize + 2 + msgp.IntSize + 2 + msgp.IntSize + 6 + msgp.IntSize + 6 + msgp.IntSize + 5 + msgp.ArrayHeaderSize + (len(z.DataErasureDistribution) * (msgp.IntSize)) + 6 + msgp.IntSize + 5 + z.DataPartInfoNumbers.Msgsize() + 4 + z.DataPartInfoSizes.Msgsize() + 5 + msgp.IntSize + 6 + msgp.Int64Size + 5 + msgp.MapHeaderSize
	if z.MetaSys != nil {
		for za0002, za0003 := range z.MetaSys {
			_ = za0003
			s += msgp.StringPrefixSize + len(za0002) + msgp.StringPrefixSize + len(za0003)
		}
	}
	s += 5 + msgp.MapHeaderSize
	if z.MetaSysBin != nil {
		for za0004, za0005 := range z.MetaSysBin {
			_ = za0005
			s += msgp.StringPrefixSize + len(za0004) + msgp.BytesPrefixSize + len(za0005)
		}
	}
	s += 6 + msgp.MapHeaderSize
	if z.MetaUser != nil {
		for za0006, za0007 := range z.MetaUser {
			_ = za0007
			s += msgp.StringPrefixSize + len(za0006) + msgp.StringPrefixSize + len(za0007)
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ObjectMetaV2Object) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.VersionID, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "VersionID")
				return
			}
		case "dd":
			z.DataDir, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "DataDir")
				return
			}
		case "ealgo":
			{
				var zb0002 int
				zb0002, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "DataErasureAlgorithm")
					return
				}
				z.DataErasureAlgorithm = ErasureAlgo(zb0002)
			}
		case "m":
			z.DataErasureM, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "DataErasureM")
				return
			}
		case "n":
			z.DataErasureN, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "DataErasureN")
				return
			}
		case "bsize":
			z.DataErasureBlockSize, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "DataErasureBlockSize")
				return
			}
		case "index":
			z.DataErasureIndex, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "DataErasureIndex")
				return
			}
		case "dist":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "DataErasureDistribution")
				return
			}
			if cap(z.DataErasureDistribution) >= int(zb0003) {
				z.DataErasureDistribution = (z.DataErasureDistribution)[:zb0003]
			} else {
				z.DataErasureDistribution = make([]int, zb0003)
			}
			for za0001 := range z.DataErasureDistribution {
				z.DataErasureDistribution[za0001], err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "DataErasureDistribution", za0001)
					return
				}
			}
		case "clago":
			{
				var zb0004 int
				zb0004, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "DataErasureChecksumAlgo")
					return
				}
				z.DataErasureChecksumAlgo = ChecksumAlgo(zb0004)
			}
		case "pnum":
			err = z.DataPartInfoNumbers.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "DataPartInfoNumbers")
				return
			}
		case "psz":
			err = z.DataPartInfoSizes.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "DataPartInfoSizes")
				return
			}
		case "size":
			z.StatSize, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "StatSize")
				return
			}
		case "mtime":
			z.StatModTime, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "StatModTime")
				return
			}
		case "msys":
			var zb0005 uint32
			zb0005, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "MetaSys")
				return
			}
			if z.MetaSys == nil {
				z.MetaSys = make(map[string]string, zb0005)
			} else if len(z.MetaSys) > 0 {
				for key := range z.MetaSys {
					delete(z.MetaSys, key)
				}
			}
			for zb0005 > 0 {
				zb0005--
				var za0002 string
				var za0003 string
				za0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "MetaSys")
					return
				}
				za0003, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "MetaSys", za0002)
					return
				}
				z.MetaSys[za0002] = za0003
			}
		case "mbin":
			var zb0006 uint32
			zb0006, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "MetaSysBin")
				return
			}
			if z.MetaSysBin == nil {
				z.MetaSysBin = make(map[string][]byte, zb0006)
			} else if len(z.MetaSysBin) > 0 {
				for key := range z.MetaSysBin {
					delete(z.MetaSysBin, key)
				}
			}
			for zb0006 > 0 {
				zb0006--
				var za0004 string
				var za0005 []byte
				za0004, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "MetaSysBin")
					return
				}
				za0005, err = dc.ReadBytes(za0005)
				if err != nil {
					err = msgp.WrapError(err, "MetaSysBin", za0004)
					return
				}
				z.MetaSysBin[za0004] = za0005
			}
		case "muser":
			var zb0007 uint32
			zb0007, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "MetaUser")
				return
			}
			if z.MetaUser == nil {
				z.MetaUser = make(map[string]string, zb0007)
			} else if len(z.MetaUser) > 0 {
				for key := range z.MetaUser {
					delete(z.MetaUser, key)
				}
			}
			for zb0007 > 0 {
				zb0007--
				var za0006 string
				var za0007 string
				za0006, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "MetaUser")
					return
				}
				za0007, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "MetaUser", za0006)
					return
				}
				z.MetaUser[za0006] = za0007
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ObjectMetaV2Object) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(16)
	var zb0001Mask uint16 /* 16 bits */
	if z.MetaSys == nil {
		zb0001Len--
		zb0001Mask |= 0x2000
	}
	if z.MetaSysBin == nil {
		zb0001Len--
		zb0001Mask |= 0x4000
	}
	if z.MetaUser == nil {
		zb0001Len--
		zb0001Mask |= 0x8000
	}
	// variable map header, size zb0001Len
	err = en.WriteMapHeader(zb0001Len)
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	// write "id"
	err = en.Append(0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.VersionID)
	if err != nil {
		err = msgp.WrapError(err, "VersionID")
		return
	}
	// write "dd"
	err = en.Append(0xa2, 0x64, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.DataDir)
	if err != nil {
		err = msgp.WrapError(err, "DataDir")
		return
	}
	// write "ealgo"
	err = en.Append(0xa5, 0x65, 0x61, 0x6c, 0x67, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteInt(int(z.DataErasureAlgorithm))
	if err != nil {
		err = msgp.WrapError(err, "DataErasureAlgorithm")
		return
	}
	// write "m"
	err = en.Append(0xa1, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.DataErasureM)
	if err != nil {
		err = msgp.WrapError(err, "DataErasureM")
		return
	}
	// write "n"
	err = en.Append(0xa1, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt(z.DataErasureN)
	if err != nil {
		err = msgp.WrapError(err, "DataErasureN")
		return
	}
	// write "bsize"
	err = en.Append(0xa5, 0x62, 0x73, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.DataErasureBlockSize)
	if err != nil {
		err = msgp.WrapError(err, "DataErasureBlockSize")
		return
	}
	// write "index"
	err = en.Append(0xa5, 0x69, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteInt(z.DataErasureIndex)
	if err != nil {
		err = msgp.WrapError(err, "DataErasureIndex")
		return
	}
	// write "dist"
	err = en.Append(0xa4, 0x64, 0x69, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.DataErasureDistribution)))
	if err != nil {
		err = msgp.WrapError(err, "DataErasureDistribution")
		return
	}
	for za0001 := range z.DataErasureDistribution {
		err = en.WriteInt(z.DataErasureDistribution[za0001])
		if err != nil {
			err = msgp.WrapError(err, "DataErasureDistribution", za0001)
			return
		}
	}
	// write "clago"
	err = en.Append(0xa5, 0x63, 0x6c, 0x61, 0x67, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteInt(int(z.DataErasureChecksumAlgo))
	if err != nil {
		err = msgp.WrapError(err, "DataErasureChecksumAlgo")
		return
	}
	// write "pnum"
	err = en.Append(0xa4, 0x70, 0x6e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = z.DataPartInfoNumbers.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "DataPartInfoNumbers")
		return
	}
	// write "psz"
	err = en.Append(0xa3, 0x70, 0x73, 0x7a)
	if err != nil {
		return
	}
	err = z.DataPartInfoSizes.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "DataPartInfoSizes")
		return
	}
	// write "size"
	err = en.Append(0xa4, 0x73, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.StatSize)
	if err != nil {
		err = msgp.WrapError(err, "StatSize")
		return
	}
	// write "mtime"
	err = en.Append(0xa5, 0x6d, 0x74, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.StatModTime)
	if err != nil {
		err = msgp.WrapError(err, "StatModTime")
		return
	}
	if (zb0001Mask & 0x2000) == 0 { // if not empty
		// write "msys"
		err = en.Append(0xa4, 0x6d, 0x73, 0x79, 0x73)
		if err != nil {
			return
		}
		err = en.WriteMapHeader(uint32(len(z.MetaSys)))
		if err != nil {
			err = msgp.WrapError(err, "MetaSys")
			return
		}
		for za0002, za0003 := range z.MetaSys {
			err = en.WriteString(za0002)
			if err != nil {
				err = msgp.WrapError(err, "MetaSys")
				return
			}
			err = en.WriteString(za0003)
			if err != nil {
				err = msgp.WrapError(err, "MetaSys", za0002)
				return
			}
		}
	}
	if (zb0001Mask & 0x4000) == 0 { // if not empty
		// write "mbin"
		err = en.Append(0xa4, 0x6d, 0x62, 0x69, 0x6e)
		if err != nil {
			return
		}
		err = en.WriteMapHeader(uint32(len(z.MetaSysBin)))
		if err != nil {
			err = msgp.WrapError(err, "MetaSysBin")
			return
		}
		for za0004, za0005 := range z.MetaSysBin {
			err = en.WriteString(za0004)
			if err != nil {
				err = msgp.WrapError(err, "MetaSysBin")
				return
			}
			err = en.WriteBytes(za0005)
			if err != nil {
				err = msgp.WrapError(err, "MetaSysBin", za0004)
				return
			}
		}
	}
	if (zb0001Mask & 0x8000) == 0 { // if not empty
		// write "muser"
		err = en.Append(0xa5, 0x6d, 0x75, 0x73, 0x65, 0x72)
		if err != nil {
			return
		}
		err = en.WriteMapHeader(uint32(len(z.MetaUser)))
		if err != nil {
			err = msgp.WrapError(err, "MetaUser")
			return
		}
		for za0006, za0007 := range z.MetaUser {
			err = en.WriteString(za0006)
			if err != nil {
				err = msgp.WrapError(err, "MetaUser")
				return
			}
			err = en.WriteString(za0007)
			if err != nil {
				err = msgp.WrapError(err, "MetaUser", za0006)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ObjectMetaV2Object) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(16)
	var zb0001Mask uint16 /* 16 bits */
	if z.MetaSys == nil {
		zb0001Len--
		zb0001Mask |= 0x2000
	}
	if z.MetaSysBin == nil {
		zb0001Len--
		zb0001Mask |= 0x4000
	}
	if z.MetaUser == nil {
		zb0001Len--
		zb0001Mask |= 0x8000
	}
	// variable map header, size zb0001Len
	o = msgp.AppendMapHeader(o, zb0001Len)
	if zb0001Len == 0 {
		return
	}
	// string "id"
	o = append(o, 0xa2, 0x69, 0x64)
	o = msgp.AppendUint64(o, z.VersionID)
	// string "dd"
	o = append(o, 0xa2, 0x64, 0x64)
	o = msgp.AppendUint64(o, z.DataDir)
	// string "ealgo"
	o = append(o, 0xa5, 0x65, 0x61, 0x6c, 0x67, 0x6f)
	o = msgp.AppendInt(o, int(z.DataErasureAlgorithm))
	// string "m"
	o = append(o, 0xa1, 0x6d)
	o = msgp.AppendInt(o, z.DataErasureM)
	// string "n"
	o = append(o, 0xa1, 0x6e)
	o = msgp.AppendInt(o, z.DataErasureN)
	// string "bsize"
	o = append(o, 0xa5, 0x62, 0x73, 0x69, 0x7a, 0x65)
	o = msgp.AppendInt(o, z.DataErasureBlockSize)
	// string "index"
	o = append(o, 0xa5, 0x69, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendInt(o, z.DataErasureIndex)
	// string "dist"
	o = append(o, 0xa4, 0x64, 0x69, 0x73, 0x74)
	o = msgp.AppendArrayHeader(o, uint32(len(z.DataErasureDistribution)))
	for za0001 := range z.DataErasureDistribution {
		o = msgp.AppendInt(o, z.DataErasureDistribution[za0001])
	}
	// string "clago"
	o = append(o, 0xa5, 0x63, 0x6c, 0x61, 0x67, 0x6f)
	o = msgp.AppendInt(o, int(z.DataErasureChecksumAlgo))
	// string "pnum"
	o = append(o, 0xa4, 0x70, 0x6e, 0x75, 0x6d)
	o, err = z.DataPartInfoNumbers.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "DataPartInfoNumbers")
		return
	}
	// string "psz"
	o = append(o, 0xa3, 0x70, 0x73, 0x7a)
	o, err = z.DataPartInfoSizes.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "DataPartInfoSizes")
		return
	}
	// string "size"
	o = append(o, 0xa4, 0x73, 0x69, 0x7a, 0x65)
	o = msgp.AppendInt(o, z.StatSize)
	// string "mtime"
	o = append(o, 0xa5, 0x6d, 0x74, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.StatModTime)
	if (zb0001Mask & 0x2000) == 0 { // if not empty
		// string "msys"
		o = append(o, 0xa4, 0x6d, 0x73, 0x79, 0x73)
		o = msgp.AppendMapHeader(o, uint32(len(z.MetaSys)))
		for za0002, za0003 := range z.MetaSys {
			o = msgp.AppendString(o, za0002)
			o = msgp.AppendString(o, za0003)
		}
	}
	if (zb0001Mask & 0x4000) == 0 { // if not empty
		// string "mbin"
		o = append(o, 0xa4, 0x6d, 0x62, 0x69, 0x6e)
		o = msgp.AppendMapHeader(o, uint32(len(z.MetaSysBin)))
		for za0004, za0005 := range z.MetaSysBin {
			o = msgp.AppendString(o, za0004)
			o = msgp.AppendBytes(o, za0005)
		}
	}
	if (zb0001Mask & 0x8000) == 0 { // if not empty
		// string "muser"
		o = append(o, 0xa5, 0x6d, 0x75, 0x73, 0x65, 0x72)
		o = msgp.AppendMapHeader(o, uint32(len(z.MetaUser)))
		for za0006, za0007 := range z.MetaUser {
			o = msgp.AppendString(o, za0006)
			o = msgp.AppendString(o, za0007)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ObjectMetaV2Object) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.VersionID, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "VersionID")
				return
			}
		case "dd":
			z.DataDir, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DataDir")
				return
			}
		case "ealgo":
			{
				var zb0002 int
				zb0002, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "DataErasureAlgorithm")
					return
				}
				z.DataErasureAlgorithm = ErasureAlgo(zb0002)
			}
		case "m":
			z.DataErasureM, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DataErasureM")
				return
			}
		case "n":
			z.DataErasureN, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DataErasureN")
				return
			}
		case "bsize":
			z.DataErasureBlockSize, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DataErasureBlockSize")
				return
			}
		case "index":
			z.DataErasureIndex, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DataErasureIndex")
				return
			}
		case "dist":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DataErasureDistribution")
				return
			}
			if cap(z.DataErasureDistribution) >= int(zb0003) {
				z.DataErasureDistribution = (z.DataErasureDistribution)[:zb0003]
			} else {
				z.DataErasureDistribution = make([]int, zb0003)
			}
			for za0001 := range z.DataErasureDistribution {
				z.DataErasureDistribution[za0001], bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "DataErasureDistribution", za0001)
					return
				}
			}
		case "clago":
			{
				var zb0004 int
				zb0004, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "DataErasureChecksumAlgo")
					return
				}
				z.DataErasureChecksumAlgo = ChecksumAlgo(zb0004)
			}
		case "pnum":
			bts, err = z.DataPartInfoNumbers.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "DataPartInfoNumbers")
				return
			}
		case "psz":
			bts, err = z.DataPartInfoSizes.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "DataPartInfoSizes")
				return
			}
		case "size":
			z.StatSize, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StatSize")
				return
			}
		case "mtime":
			z.StatModTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StatModTime")
				return
			}
		case "msys":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MetaSys")
				return
			}
			if z.MetaSys == nil {
				z.MetaSys = make(map[string]string, zb0005)
			} else if len(z.MetaSys) > 0 {
				for key := range z.MetaSys {
					delete(z.MetaSys, key)
				}
			}
			for zb0005 > 0 {
				var za0002 string
				var za0003 string
				zb0005--
				za0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "MetaSys")
					return
				}
				za0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "MetaSys", za0002)
					return
				}
				z.MetaSys[za0002] = za0003
			}
		case "mbin":
			var zb0006 uint32
			zb0006, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MetaSysBin")
				return
			}
			if z.MetaSysBin == nil {
				z.MetaSysBin = make(map[string][]byte, zb0006)
			} else if len(z.MetaSysBin) > 0 {
				for key := range z.MetaSysBin {
					delete(z.MetaSysBin, key)
				}
			}
			for zb0006 > 0 {
				var za0004 string
				var za0005 []byte
				zb0006--
				za0004, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "MetaSysBin")
					return
				}
				za0005, bts, err = msgp.ReadBytesBytes(bts, za0005)
				if err != nil {
					err = msgp.WrapError(err, "MetaSysBin", za0004)
					return
				}
				z.MetaSysBin[za0004] = za0005
			}
		case "muser":
			var zb0007 uint32
			zb0007, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MetaUser")
				return
			}
			if z.MetaUser == nil {
				z.MetaUser = make(map[string]string, zb0007)
			} else if len(z.MetaUser) > 0 {
				for key := range z.MetaUser {
					delete(z.MetaUser, key)
				}
			}
			for zb0007 > 0 {
				var za0006 string
				var za0007 string
				zb0007--
				za0006, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "MetaUser")
					return
				}
				za0007, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "MetaUser", za0006)
					return
				}
				z.MetaUser[za0006] = za0007
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ObjectMetaV2Object) Msgsize() (s int) {
	s = 3 + 3 + msgp.Uint64Size + 3 + msgp.Uint64Size + 6 + msgp.IntSize + 2 + msgp.IntSize + 2 + msgp.IntSize + 6 + msgp.IntSize + 6 + msgp.IntSize + 5 + msgp.ArrayHeaderSize + (len(z.DataErasureDistribution) * (msgp.IntSize)) + 6 + msgp.IntSize + 5 + z.DataPartInfoNumbers.Msgsize() + 4 + z.DataPartInfoSizes.Msgsize() + 5 + msgp.IntSize + 6 + msgp.Int64Size + 5 + msgp.MapHeaderSize
	if z.MetaSys != nil {
		for za0002, za0003 := range z.MetaSys {
			_ = za0003
			s += msgp.StringPrefixSize + len(za0002) + msgp.StringPrefixSize + len(za0003)
		}
	}
	s += 5 + msgp.MapHeaderSize
	if z.MetaSysBin != nil {
		for za0004, za0005 := range z.MetaSysBin {
			_ = za0005
			s += msgp.StringPrefixSize + len(za0004) + msgp.BytesPrefixSize + len(za0005)
		}
	}
	s += 6 + msgp.MapHeaderSize
	if z.MetaUser != nil {
		for za0006, za0007 := range z.MetaUser {
			_ = za0007
			s += msgp.StringPrefixSize + len(za0006) + msgp.StringPrefixSize + len(za0007)
		}
	}
	return
}
